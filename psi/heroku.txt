·--------·
| HEROKU |
·--------·

1) Copiar los ficheros de otras veces: Procfile, runtime.txt y requirements.txt
	(!) Pero CAMBIAR en el archivo Procfile:
		web: gunicorn ratonGato.wsgi --log-file -
		              ^^^^^^^^^
		               Nombre
		              proyecto

2) Poner lo siguiente en settings de la carpeta del proyecto:
	DATABASES = {}
	if os.getenv('SQLITE', False):
		DATABASES['default'] = {
		'ENGINE': 'django.db.backends.sqlite3',
		'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
		}
	else:
		import dj_database_url
		DATABASES['default'] = dj_database_url.config(default='postgres://alumnodb:alumnodb@localhost:5432/ratongato')
		                                                                                                   ^^^^^^^^^
		                                                                                                   Nombre BdB
	STATIC_URL = '/static/'                              |
	STATIC_ROOT = os.path.join(BASE_DIR, 'staticHeroku')  > A lo mejor ya está puesto ABAJO, al final.
	STATICFILES_DIRS = [STATIC_DIR, ]                    |

3) Añadir al fichero urls de la carpeta del proyecto: (!) A lo mejor ya está puesto.
	from django.conf import settings
	from django.conf.urls.static import static
	(...)
	urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)

4) wsgi de la carpeta del proyecto debe quedar así:
	import os
	from django.core.wsgi import get_wsgi_application
	from dj_static import Cling
	os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ratonGato.settings')
	                                                 ^^^^^^^^^
	                                               NombreProyecto
	application = Cling(get_wsgi_application())

5) El .git debe estar a la misma altura que la carpeta del proyecto, Procfile, runtime.txt, requirements.txt, manage.py...

6) Creamos un .gitignote a la misma altura que el .git y metemos lo siguiente:
	*.pyc
	staticfiles
	uploads

7) Subimos todo a git (git add ., git commit -m ".", git push).

8) Meter el comando:
	heroku login

   8.1) Si no tienes una cuenta de usuario, registrarte en https://signup.heroku.com/identity

9) Meter el comando:
	heroku create
   Y nos sale POR EJEMPLO:
	Creating app... done, ⬢ fierce-reaches-65016
	https://fierce-reaches-65016.herokuapp.com/ | https://git.heroku.com/fierce-reaches-65016.git
	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
		         SÓLO COPIAR ESO

10) Meter en settings de la carpeta del proyecto (basándonos en el ejemplo de arriba):
	ALLOWED_HOSTS = [u'fierce-reaches-65016.herokuapp.com', u'localhost', u'127.0.0.1']
	                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	                               PEGAR AQUÍ

11) Subimos todo a git (git add ., git commit -m ".", git push).

12) Metemos el siguiente comando:
	git push heroku main

	(!) Cuidado con las tabulaciones al copiar y pegar.
	(!) Asegurarse que la carpeta static está creada y contiene algo para que así se suba.

13) Para arrancar la app que ya está en Heroku hacemos el siguiente paso:
	heroku ps:scale web=1

14) Ejecutar el comando de las migraciones:
	heroku run python3 manage.py migrate

	ó

	heroku run bash
	python3 manage.py migrate

	(Si queremos crear las migraciones usar: python3 manage.py makemigrations)

15) Para comprobar si la app se está ejecutando correctamente podemos usar el siguiente comando:
	heroku open

	ó

	copiar el link de antes (fierce-reaches-65016.herokuapp.com) que está en el settings de la carpeta del proyecto y pegarlo en el navegador.

    15.1) En caso de que no funcione podemos usar el siguiente comando:
    		heroku logs --tail

(!) Asegurarnos de que nuestra aplicación en heroku no está desplegada en modo debug. Para ello, poner lo siguiente en settings de la carpeta del proyecto:
	DEBUG = False

(*) Si queremos ejecutar los tests (como usa la base de datos sqlite) debemos ejecutar el siguiente comando:
	heroku config:set SQLITE=1


	y una vez finalizada la ejecución de los tests:
		heroku config:unset SQLITE



(**) Si queremos crear un superusuario (por ejemplo para usar lo de admin):
	heroku run python3 manage.py createsuperuser

	ó

	heroku run bash
	python3 manage.py createsuperuser

(***) Si queremos limpiar la base de datos:
	heroku pg:reset --confirm fierce-reaches-65016
	                          ^^^^^^^^^^^^^^^^^^^^
	                               NOMBRE APP

	y luego volver a hacer las migraciones
